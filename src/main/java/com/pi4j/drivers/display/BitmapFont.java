package com.pi4j.drivers.display;

import java.util.HashMap;
import java.util.Map;

/**
 * A simple bitmap font implementation, currently limited to 64 bit character cells, including a default
 * HD44780-compatible 5x8 font.
 */
public class BitmapFont {

    /** Rendering options */
    public enum Option {
        /** If set, empty pixel columns at the start and end of a character cell are skipped. */
        PROPORTIONAL,
    }

    private static BitmapFont font5x8 = null;
    private static BitmapFont font5x8proportional = null;

    // To expand supported bitmap sizes and reduce memory, perhaps change this to an interleaved int array with binary
    // search for character lookup.
    private final Map<Integer, Glyph> codepoints = new HashMap<>();

    public void addCharacter(int codepoint, long bitmap) {
        addCharacter(codepoint, cellWidth, bitmap);
    }

    public void addCharacter(int codepoint, int width, long bitmap) {
        codepoints.put(codepoint, new Glyph(width, bitmap));
    }

    /** Adds bitmaps for a set of subsequent codepoints. */
    public void addCharacters(int codePoint, long... bitmaps) {
        for (long bitmap : bitmaps) {
            addCharacter(codePoint++, bitmap);
        }
    }

    /** The character cell width. */
    private final int cellWidth;
    /** The character cell height. */
    private final int cellHeight;

    /** Bitmask used for checking if a column is empty */
    private final long columnMask;

    /**
     * Constructs an empty BitmapFont with the given character cell size.
     * The total size is limited to 64 bit.
     */
    public BitmapFont(int cellWidth, int cellHeight) {
        if (cellWidth <= 0 || cellHeight <= 0) {
            throw new IllegalArgumentException("cellWidth & height must be > 0");
        }
        if (cellWidth * cellHeight > 64) {
            throw new IllegalArgumentException("bitWidth * cellHeight must be <= 64");
        }
        this.cellWidth = cellWidth;
        this.cellHeight = cellHeight;
        long columnMask = 0;
        long shift = 0;
        for (int i = 0; i < cellHeight; i++) {
            columnMask |= 1L << shift;
            shift += cellWidth;
        }
        this.columnMask = columnMask;
    }

    /**
     *  Returns a basic 5x8 (6x8 including spacing) bitmap font compatible with HD44780 displays, so the custom
     *  character capability of this display can be used with data from this font to render ISO-8859-1 characters
     *  beyond the basic ascii range.
     */
    public static BitmapFont get5x8Font(Option... options) {
        synchronized (BitmapFont.class) {
            if (font5x8 == null) {
                font5x8 = new BitmapFont(6, 8);
                font5x8.addLcdCharacters();
            }

            if (options.length > 0 && options[0] == Option.PROPORTIONAL) {
                if (font5x8proportional == null) {
                    font5x8proportional = font5x8.toProportional();
                }
                return font5x8proportional;
            }

            return font5x8;
        }
    }

    /** Returns the width of a character cell in pixels. */
    public int getCellHeight() {
        return cellHeight;
    }

    /** Returns the height of a character cell in pixels. */
    public int getCellWidth() {
        return cellWidth;
    }

    public Glyph getGlyph(int codepoint) {
        return codepoints.get(codepoint);
    }

    public BitmapFont toProportional() {
        BitmapFont result = new BitmapFont(cellWidth, cellHeight);
        for (Map.Entry<Integer, Glyph> entry : font5x8.codepoints.entrySet()) {
            result.codepoints.put(entry.getKey(), entry.getValue().toProportional());
        }
        return result;
    }

    private void addLcdCharacters() {
            addCharacters(0x020, 0,  //
                    0b00000_00100_00100_00100_00100_00000_00000_00100L, // !
                    0b00000_01010_01010_01010_00000_00000_00000_00000L, // "
                    0b00000_01010_01010_11111_01010_11111_01010_01010L, // #
                    0b00000_00100_01111_10100_01110_00101_11110_00100L, // $
                    0b00000_11000_11001_00010_00100_01000_10011_00011L, // %
                    0b00000_01100_10010_10100_01000_10101_10010_01101L, // &
                    0b00000_01100_00100_01000_00000_00000_00000_00000L, // '
                    0b00000_00010_00100_01000_01000_01000_00100_00010L, // (
                    0b00000_01000_00100_00010_00010_00010_00100_01000L, // )
                    0b00000_00000_00100_10101_01110_10101_00100_00000L, // *
                    0b00000_00000_00100_00100_11111_00100_00100_00000L, // +
                    0b00000_00000_00000_00000_00000_01100_00100_01000L, // ,
                    0b00000_00000_00000_00000_11111_00000_00000_00000L, // -
                    0b00000_00000_00000_00000_00000_00000_01100_01100L, // .
                    0b00000_00000_00001_00010_00100_01000_10000_00000L, // /
                    0b00000_01110_10001_10011_10101_11001_10001_01110L, // 0
                    0b00000_00100_01100_00100_00100_00100_00100_01110L, // 1
                    0b00000_01110_10001_00001_00010_00100_01000_11111L, // 2
                    0b00000_11111_00010_00100_00010_00001_10001_01110L, // 3
                    0b00000_00010_00110_01010_10010_11111_00010_00010L, // 4
                    0b00000_11111_10000_11110_00001_00001_10001_01110L, // 5
                    0b00000_00110_01000_10000_11110_10001_10001_01110L, // 6
                    0b00000_11111_00001_00010_00100_01000_01000_01000L, // 7
                    0b00000_01110_10001_10001_01110_10001_10001_01110L, // 8
                    0b00000_01110_10001_10001_01111_00001_00010_01100L, // 9
                    0b00000_00000_01100_01100_00000_01100_01100_00000L, // :
                    0b00000_00000_01100_01100_00000_01100_00100_01000L, // ;
                    0b00000_00010_00100_01000_10000_01000_00100_00010L, // <
                    0b00000_00000_00000_11111_00000_11111_00000_00000L, // =
                    0b00000_01000_00100_00010_00001_00010_00100_01000L, // >
                    0b00000_01110_10001_00001_00010_00100_00000_00100L, // ?
                    0b00000_01110_10001_00001_01101_10101_10101_01110L, // @
                    0b00000_00100_01010_10001_10001_11111_10001_10001L, // A
                    0b00000_11110_10001_10001_11110_10001_10001_11110L, // B
                    0b00000_01110_10001_10000_10000_10000_10001_01110L, // C
                    0b00000_11100_10010_10001_10001_10001_10010_11100L, // D
                    0b00000_11111_10000_10000_11110_10000_10000_11111L, // E
                    0b00000_11111_10000_10000_11110_10000_10000_10000L, // F
                    0b00000_01110_10001_10000_10111_10001_10001_01111L, // G
                    0b00000_10001_10001_10001_11111_10001_10001_10001L, // H
                    0b00000_01110_00100_00100_00100_00100_00100_01110L, // I
                    0b00000_01110_00010_00010_00010_00010_10010_01100L, // J
                    0b00000_10001_10010_10100_11000_10100_10010_10001L, // K
                    0b00000_10000_10000_10000_10000_10000_10000_11111L, // L
                    0b00000_10001_11011_10101_10101_10001_10001_10001L, // M
                    0b00000_10001_10001_11001_10101_10011_10001_10001L, // N
                    0b00000_01110_10001_10001_10001_10001_10001_01110L, // O
                    0b00000_11110_10001_10001_11110_10000_10000_10000L, // P
                    0b00000_01110_10001_10001_10001_10101_10010_01101L, // Q
                    0b00000_11110_10001_10001_11110_10100_10010_10001L, // R
                    0b00000_01111_10000_10000_01110_00001_00001_11110L, // S
                    0b00000_11111_00100_00100_00100_00100_00100_00100L, // T
                    0b00000_10001_10001_10001_10001_10001_10001_01110L, // U
                    0b00000_10001_10001_10001_10001_10001_01010_00100L, // V
                    0b00000_10001_10001_10001_10101_10101_10101_01010L, // W
                    0b00000_10001_10001_01010_00100_01010_10001_10001L, // X
                    0b00000_10001_10001_10001_01010_00100_00100_00100L, // Y
                    0b00000_11111_00001_00010_00100_01000_10000_11111L, // Z
                    0b00000_01110_01000_01000_01000_01000_01000_01110L, // [
                    0b00000_00000_10000_01000_00100_00010_00001_00000L, // \
                    0b00000_01110_00010_00010_00010_00010_00010_01110L, // ]
                    0b00000_00100_01010_10001_00000_00000_00000_00000L, // ^
                    0b00000_00000_00000_00000_00000_00000_00000_11111L, // _
                    0b00000_01000_00100_00010_00000_00000_00000_00000L, // `
                    0b00000_00000_00000_01110_00001_01111_10001_01111L, // a
                    0b00000_10000_10000_10110_11001_10001_10001_11110L, // b
                    0b00000_00000_00000_01110_10000_10000_10001_01110L, // c
                    0b00000_00001_00001_01101_10011_10001_10001_01111L, // d
                    0b00000_00000_00000_01110_10001_11111_10000_01110L, // e
                    0b00000_00110_01001_01000_11100_01000_01000_01000L, // f
                    0b00000_00000_01111_10001_10001_01111_00001_01110L, // g
                    0b00000_10000_10000_10110_11001_10001_10001_10001L, // h
                    0b00000_00100_00000_00100_01100_00100_00100_01110L, // i
                    0b00000_00010_00000_00110_00010_00010_10010_01100L, // j
                    0b00000_10000_10000_10010_10100_11000_10100_10010L, // k
                    0b00000_01100_00100_00100_00100_00100_00100_11111L, // l
                    0b00000_00000_00000_11010_10101_10101_10001_10001L, // m
                    0b00000_00000_00000_10110_11001_10001_10001_10001L, // n
                    0b00000_00000_00000_01110_10001_10001_10001_01110L, // o
                    0b00000_00000_00000_11110_10001_11110_10000_10000L, // p
                    0b00000_00000_00000_01101_10011_01111_00001_00001L, // q
                    0b00000_00000_00000_10110_11001_10000_10000_10000L, // r
                    0b00000_00000_00000_01110_10000_01110_00001_11110L, // s
                    0b00000_01000_01000_11100_01000_01000_01001_00110L, // t
                    0b00000_00000_00000_10001_10001_10001_10011_01101L, // u
                    0b00000_00000_00000_10001_10001_10001_01010_00100L, // v
                    0b00000_00000_00000_10001_10001_10101_10101_01010L, // w
                    0b00000_00000_00000_10001_01010_00100_01010_10001L, // x
                    0b00000_00000_00000_10001_10001_01111_00001_01110L, // y
                    0b00000_00000_00000_11111_00010_00100_01000_11111L, // z
                    0b00000_00010_00100_00100_01000_00100_00100_00010L, // {
                    0b00000_00100_00100_00100_00100_00100_00100_00100L, // |
                    0b00000_01000_00100_00100_00010_00100_00100_01000L, // }
                    0b00000_00000_00000_00000_01101_10010_00000_00000L); // ~

            addCharacters(0x0a0, 0,  // NBSP
                    0b00000_00100_00000_00000_00100_00100_00100_00100L, // ¡
                    0b00000_00100_01110_10100_10100_10101_01110_00100L, // ¢
                    0b00000_00110_01000_01000_11100_01000_01001_10110L, // £
                    0b00000_00000_10001_01110_01010_01110_10001_00000L, // ¤
                    0b00000_10001_01010_11111_00100_11111_00100_00100L, // ¥
                    0b00000_00100_00100_00100_00000_00100_00100_00100L, // ¦
                    0b00000_00110_01001_00100_01010_00100_10010_01100L, // §
                    0b00000_00010_00101_00100_11111_00100_10100_01000L, // ¨
                    0b00000_11111_10001_10101_10111_10101_10001_11111L, // ©
                    0b00000_01110_00001_01111_10001_01111_00000_11111L, // ª
                    0b00000_00000_00101_01010_10100_01010_00101_00000L, // «
                    0b00000_10010_10101_10101_11101_10101_10101_10010L, // ¬
                    0b00000_01111_10001_10001_01111_00101_01001_10001L, // SHY
                    0b00000_11111_10001_10101_10001_10011_10101_11111L, // ®
                    0b00000_00100_01000_01100_00000_00000_00000_00000L, // ¯
                    0b01100_10010_10010_10010_01100_00000_00000_00000L, // °
                    0b00000_00100_00100_11111_00100_00100_00000_11111L, // ±
                    0b01100_10010_00100_01000_11110_00000_00000_00000L, // ²
                    0b11100_00010_01100_00010_11100_00000_00000_00000L, // ³
                    0b11100_10010_11100_10000_10010_10111_10010_00011L, // ´
                    0b00000_10001_10001_10001_10011_11101_10000_10000L, // µ
                    0b00000_01111_10011_10011_01111_00011_00011_00011L, // ¶
                    0b00000_00000_00000_00000_01100_01100_00000_00000L, // ·
                    0b00000_00000_00000_01010_10001_10101_10101_01010L, // ¸
                    0b01000_11000_01000_01000_11100_00000_00000_00000L, // ¹
                    0b00000_01110_10001_10001_10001_01110_00000_11111L, // º
                    0b00000_00000_10100_01010_00101_01010_10100_00000L, // »
                    0b10001_10010_10100_01010_10110_01010_01111_00010L, // ¼
                    0b10001_10010_10100_01010_10101_00001_00010_00111L, // ½
                    0b11000_01000_11000_01001_11011_00101_00111_00001L, // ¾
                    0b00000_00100_00000_00100_01000_10000_10001_01110L, // ¿
                    0b01000_00100_00100_01010_10001_11111_10001_10001L, // À
                    0b00010_00100_00100_01010_10001_11111_10001_10001L, // Á
                    0b00100_01010_00000_01110_10001_11111_10001_10001L, // Â
                    0b01101_10010_00000_01110_10001_11111_10001_10001L, // Ã
                    0b01010_00000_00100_01010_10001_11111_10001_10001L, // Ä
                    0b00100_01010_00100_01010_10001_11111_10001_10001L, // Å
                    0b00000_00111_01100_10100_10111_11100_10100_10111L, // Æ
                    0b01110_10001_10000_10000_10001_01110_00010_00110L, // Ç
                    0b01000_00100_00000_11111_10000_11110_10000_11111L, // È
                    0b00010_00100_00000_11111_10000_11110_10000_11111L, // É
                    0b00100_01010_00000_11111_10000_11110_10000_11111L, // Ê
                    0b00000_01010_00000_11111_10000_11110_10000_11111L, // Ë
                    0b01000_00100_00000_01110_00100_00100_00100_01110L, // Ì
                    0b00010_00100_00000_01110_00100_00100_00100_01110L, // Í
                    0b00100_01010_00000_01110_00100_00100_00100_01110L, // Î
                    0b00000_01010_00000_01110_00100_00100_00100_01110L, // Ï
                    0b00000_01110_01001_01001_11101_01001_01001_01110L, // Ð
                    0b01101_10010_00000_10001_11001_10101_10011_10001L, // Ñ
                    0b01000_00100_01110_10001_10001_10001_10001_01110L, // Ò
                    0b00010_00100_01110_10001_10001_10001_10001_01110L, // Ó
                    0b00100_01010_00000_01110_10001_10001_10001_01110L, // Ô
                    0b01101_10010_00000_01110_10001_10001_10001_01110L, // Õ
                    0b01010_00000_01110_10001_10001_10001_10001_01110L, // Ö
                    0b00000_00000_10001_01010_00100_01010_10001_00000L, // ×
                    0b00000_01110_00100_01110_10101_01110_00100_01110L, // Ø
                    0b01000_00100_10001_10001_10001_10001_10001_01110L, // Ù
                    0b00010_00100_10001_10001_10001_10001_10001_01110L, // Ú
                    0b00100_01010_00000_10001_10001_10001_10001_01110L, // Û
                    0b01010_00000_10001_10001_10001_10001_10001_01110L, // Ü
                    0b00010_00100_10001_01010_00100_00100_00100_00100L, // Ý
                    0b11000_01000_01110_01001_01001_01110_01000_11100L, // Þ
                    0b00000_00110_01001_01001_01110_01001_01001_10110L, // ß
                    0b01000_00100_00000_01110_00001_01111_10001_01111L, // à
                    0b00010_00100_00000_01110_00001_01111_10001_01111L, // á
                    0b00100_01010_00000_01110_00001_01111_10001_01111L, // â
                    0b01101_10010_00000_01110_00001_01111_10001_01111L, // ã
                    0b00000_01010_00000_01110_00001_01111_10001_01111L, // ä
                    0b00100_01010_00100_01110_00001_01111_10001_01111L, // å
                    0b00000_00000_11010_00101_01111_10100_10101_01010L, // æ
                    0b00000_00000_01110_10000_10001_01110_00100_01100L, // ç
                    0b01000_00100_00000_01110_10001_11111_10000_01110L, // è
                    0b00010_00100_00000_01110_10001_11111_10000_01110L, // é
                    0b00100_01010_00000_01110_10001_11111_10000_01110L, // ê
                    0b00000_01010_00000_01110_10001_11111_10000_01110L, // ë
                    0b01000_00100_00000_00100_01100_00100_00100_01110L, // ì
                    0b00010_00100_00000_00100_01100_00100_00100_01110L, // í
                    0b00100_01010_00000_00100_01100_00100_00100_01110L, // î
                    0b00000_01010_00000_00100_01100_00100_00100_01110L, // ï
                    0b00000_10100_01000_10100_00010_01111_10001_01110L, // ð
                    0b01101_10010_00000_10110_11001_10001_10001_10001L, // ñ
                    0b01000_00100_00000_01110_10001_10001_10001_01110L, // ò
                    0b00010_00100_00000_01110_10001_10001_10001_01110L, // ó
                    0b00000_00100_01010_00000_01110_10001_10001_01110L, // ô
                    0b00000_01101_10010_00000_01110_10001_10001_01110L, // õ
                    0b00000_01010_00000_01110_10001_10001_10001_01110L, // ö
                    0b00000_00000_00100_00000_11111_00000_00100_00000L, // ÷
                    0b00000_00010_00100_01110_10101_01110_00100_01000L, // ø
                    0b01000_00100_00000_10001_10001_10001_10011_01101L, // ù
                    0b00010_00100_00000_10001_10001_10001_10011_01101L, // ú
                    0b00100_01010_00000_10001_10001_10001_10011_01101L, // û
                    0b00000_01010_00000_10001_10001_10001_10011_01101L, // ü
                    0b00010_00100_00000_10001_10001_01111_00001_01110L, // ý
                    0b00000_01100_00100_00110_00101_00110_00100_01110L, // þ
                    0b00000_01010_00000_10001_10001_01111_00001_01110L); // ÿ

            addCharacter(0x20AC,
                    0b00000_11111_10001_10000_11110_10001_10001_11110L); // 
    }

    /** A glyph, containing the bitmap for a character. */
    public class Glyph {
        private final int width;
        private final long bitmap;

        Glyph(int width, long bitmap) {
            this.width = width;
            this.bitmap = bitmap;
        }

        /** Returns true if the pixel at the given coordinate in character space is set. */
        public boolean getPixel(int x, int y) {
            // This looks a bit wonky because the bits are written from high to low in the constants.
            int bitAddress = (cellWidth - y) * cellHeight - x - 1;
            return (bitmap & (1L << bitAddress)) != 0;
        }

        /** Returns the width of this character. Should match the cell width for monospaced fonts. */
        public int getWidth() {
            return width;
        }

        /**
         * Returns a new trimmed glyph with empty columns at the left and right border removed
         * and the width adjusted accordingly.
         */
        public Glyph toProportional() {
            if (bitmap == 0) {
                // Special case (NB)SP.
                return new Glyph(cellWidth / 2, 0);
            }

            int xMin = 0;
            int xMax = width - 1;

            long mask = columnMask << (cellHeight - 1);
            while (xMin < xMax && (bitmap & mask) == 0) {
                xMin++;
                mask >>>= 1;
            }
            mask = columnMask;
            while (xMin < xMax && (bitmap & mask) == 0) {
                xMax--;
                mask <<= 1;
            }

            if (xMin == 0 && xMax == width - 1) {
                return this;
            }
            return new Glyph(Math.min(cellWidth, xMax - xMin + 2), bitmap << (width - 1 - xMax));
        }
    }
}
