package com.pi4j.drivers.display.graphics;

import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

/**
 * A simple bitmap font implementation, limited to 64 bit character cells, including a default HD44780-compatible
 * 5x8 font.
 */
public class BitmapFont {

    /** Rendering options */
    public enum Option {
        /** If set, empty pixel columns at the start and end of a character cell are skipped. */
        PROPORTIONAL,
    }

    private static BitmapFont lcdFont = null;

    // To expand supported bitmap sizes and reduce memory, perhaps change this to an interleaved int array with binary
    // search for character lookup.
    private Map<Integer, Long> codePoints = new HashMap<>();

    public void addCharacter(int codePoint, long bitmap) {
        codePoints.put(codePoint, bitmap);
    }

    /** Adds bitmaps for a set of subsequent codepoints. */
    public void addCharacters(int codePoint, long... bitmaps) {
        for (long bitmap : bitmaps) {
            addCharacter(codePoint++, bitmap);
        }
    }

    /** The character cell width. */
    private final int characterWidth;
    /** The character cell height. */
    private final int characterHeight;
    /**
     * The bit width of a character cell. Can be used to byte-align character bitmap rows, fitting the hd44780 memory
     * format
     */
    private final int bitWidth;
    /** Bitmask used for checking if a column is empty */
    private final long columnMask;

    /**
     * Constructs an empty BitmapFont with the given character cell size.
     * The total size is limited to 64 bit.
     */
    public BitmapFont(int characterWidth, int characterHeight) {
        this(characterWidth, characterHeight, characterWidth);
    }

    /**
     * Constructs an empty BitmapFont with the given character cell size and bit width.
     * The bit width can be used to byte-align character bitmap rows. The leading bit difference between the
     * bit width and the character width will remain unused.
     */
    public BitmapFont(int characterWidth, int characterHeight, int bitWidth) {
        if (characterWidth <= 0 || characterHeight <= 0) {
            throw new IllegalArgumentException("cellWidth & height must be > 0");
        }
        if (bitWidth < characterWidth) {
            throw new IllegalArgumentException("bitWidth must be >= cellWidth");
        }
        if (bitWidth * characterHeight > 64) {
            throw new IllegalArgumentException("bitWidth * cellHeight must be <= 64");
        }
        this.characterWidth = characterWidth;
        this.characterHeight = characterHeight;
        this.bitWidth = bitWidth;
        long columnMask = 0;
        long shift = 63;
        for (int i = 0; i < characterHeight; i++) {
            columnMask |= 1L << shift;
            shift -= bitWidth;
        }
        this.columnMask = columnMask;
    }

    /**
     *  Returns a basic 5x8 (6x8 including spacing) bitmap font compatible with HD44780 displays (the bit width
     *  is set to 8), so the custom character capability of this display can be used with data from this font to
     *  render ISO-8859-1 characters beyond the basic ascii range.
     */
    public static BitmapFont getLcdFont() {
        synchronized (BitmapFont.class) {
            if (lcdFont == null) {
                lcdFont = new BitmapFont(6, 8, 8);
                lcdFont.addLcdCharacters();
            }
            return lcdFont;
        }
    }

    /** Returns the bitmap for the given code point, or null if not available. */
    public Long getBitmap(int codepoint) {
        return codePoints.get(codepoint);
    }

    /** Returns the width of a character cell in pixels. */
    public int getCharacterWidth() {
        return characterWidth;
    }

    /** Returns the height of a character cell in pixels. */
    public int getCharacterHeight() {
        return characterHeight;
    }

    /** Returns the width of a character cell. */
    public int getBitWidth() {
        return bitWidth;
    }

    /**
     * Renders a text string at the given position with the given color.
     */
    public int renderText(BaseDisplayComponent display, int x, int baselineY, String text, int color) {
        return renderText(display, x, baselineY, text, color, EnumSet.noneOf(Option.class), 1, 1);
    }

    /**
     * Renders a text string at the given position with the given color and flags. Returns the width
     * of the rendered text.
     */
    public int renderText(
            BaseDisplayComponent display,
            int x,
            int baselineY,
            String text,
            int color,
            EnumSet<Option> options,
            int scaleX,
            int scaleY
    ) {
        int length = text.length();
        int width = 0;
        for (int offset = 0; offset < length; ) {
            int codepoint = text.codePointAt(offset);
            offset += Character.charCount(codepoint);
            width += renderCharacter(display, x + width, baselineY, codepoint, color, options, scaleX, scaleY);
        }
        return width;
    }

    /**
     * Renders a single character at the given position; returns the width of the character.
     */
    public int renderCharacter(
            BaseDisplayComponent display,
            int x0,
            int baselineY,
            int codepoint,
            int color,
            EnumSet<Option> options,
            int scaleX,
            int scaleY
    ) {
        long bitmap = codePoints.getOrDefault(codepoint, 0L);
        boolean proportional = options.contains(Option.PROPORTIONAL);
        if (bitmap == 0L) {
            return (proportional ? characterWidth / 2 : characterWidth) * scaleX;
        }

        int firstX = bitWidth - characterWidth;
        int lastX = bitWidth - 1;

        if (proportional) {
            while (firstX < lastX && (bitmap & (columnMask >> firstX)) == 0) {
                firstX++;
            }
            while (firstX < lastX && (bitmap & (columnMask >> lastX)) == 0) {
                lastX--;
            }
        }

        long mask = 1L << 63;
        for (int y = 0; y < characterHeight; y++) {
            mask >>>= firstX;
            for (int x = firstX; x <= lastX; x++) {
                if ((bitmap & mask) != 0) {
                    int x2 = x;
                    mask >>>= 1;
                    // Combine neighbouring pixels to reduce the number of calls.
                    while (x2 < lastX && (bitmap & mask) != 0) {
                        x2++;
                        mask >>>= 1;
                    }
                    if (scaleX == 1 && scaleY == 1 && x2 == x) {
                        display.setPixel(x0 + x - firstX, baselineY + y - characterHeight, color);
                    } else {
                        display.fillRect(
                                x0 + scaleX * (x - firstX),
                                baselineY + (y - characterHeight) * scaleY,
                                scaleX * (x2 - x + 1),
                                scaleY,
                                color);
                    }
                    x = x2;
                } else {
                    mask >>>= 1;
                }
            }
            mask >>>= (bitWidth - lastX - 1);
        }
        // Adding 2 because lastX is inclusive and to leave a one pixel gap in the proportional case.
        int width = Math.min(characterWidth, lastX - firstX + 2);
        return width * scaleX;
    }

    private void addLcdCharacters() {
            addCharacters(0x020, 0,  //
                    0b00000000_00000100_00000100_00000100_00000100_00000000_00000000_00000100L, // !
                    0b00000000_00001010_00001010_00001010_00000000_00000000_00000000_00000000L, // "
                    0b00000000_00001010_00001010_00011111_00001010_00011111_00001010_00001010L, // #
                    0b00000000_00000100_00001111_00010100_00001110_00000101_00011110_00000100L, // $
                    0b00000000_00011000_00011001_00000010_00000100_00001000_00010011_00000011L, // %
                    0b00000000_00001100_00010010_00010100_00001000_00010101_00010010_00001101L, // &
                    0b00000000_00001100_00000100_00001000_00000000_00000000_00000000_00000000L, // '
                    0b00000000_00000010_00000100_00001000_00001000_00001000_00000100_00000010L, // (
                    0b00000000_00001000_00000100_00000010_00000010_00000010_00000100_00001000L, // )
                    0b00000000_00000000_00000100_00010101_00001110_00010101_00000100_00000000L, // *
                    0b00000000_00000000_00000100_00000100_00011111_00000100_00000100_00000000L, // +
                    0b00000000_00000000_00000000_00000000_00000000_00001100_00000100_00001000L, // ,
                    0b00000000_00000000_00000000_00000000_00011111_00000000_00000000_00000000L, // -
                    0b00000000_00000000_00000000_00000000_00000000_00000000_00001100_00001100L, // .
                    0b00000000_00000000_00000001_00000010_00000100_00001000_00010000_00000000L, // /
                    0b00000000_00001110_00010001_00010011_00010101_00011001_00010001_00001110L, // 0
                    0b00000000_00000100_00001100_00000100_00000100_00000100_00000100_00001110L, // 1
                    0b00000000_00001110_00010001_00000001_00000010_00000100_00001000_00011111L, // 2
                    0b00000000_00011111_00000010_00000100_00000010_00000001_00010001_00001110L, // 3
                    0b00000000_00000010_00000110_00001010_00010010_00011111_00000010_00000010L, // 4
                    0b00000000_00011111_00010000_00011110_00000001_00000001_00010001_00001110L, // 5
                    0b00000000_00000110_00001000_00010000_00011110_00010001_00010001_00001110L, // 6
                    0b00000000_00011111_00000001_00000010_00000100_00001000_00001000_00001000L, // 7
                    0b00000000_00001110_00010001_00010001_00001110_00010001_00010001_00001110L, // 8
                    0b00000000_00001110_00010001_00010001_00001111_00000001_00000010_00001100L, // 9
                    0b00000000_00000000_00001100_00001100_00000000_00001100_00001100_00000000L, // :
                    0b00000000_00000000_00001100_00001100_00000000_00001100_00000100_00001000L, // ;
                    0b00000000_00000010_00000100_00001000_00010000_00001000_00000100_00000010L, // <
                    0b00000000_00000000_00000000_00011111_00000000_00011111_00000000_00000000L, // =
                    0b00000000_00001000_00000100_00000010_00000001_00000010_00000100_00001000L, // >
                    0b00000000_00001110_00010001_00000001_00000010_00000100_00000000_00000100L, // ?
                    0b00000000_00001110_00010001_00000001_00001101_00010101_00010101_00001110L, // @
                    0b00000000_00000100_00001010_00010001_00010001_00011111_00010001_00010001L, // A
                    0b00000000_00011110_00010001_00010001_00011110_00010001_00010001_00011110L, // B
                    0b00000000_00001110_00010001_00010000_00010000_00010000_00010001_00001110L, // C
                    0b00000000_00011100_00010010_00010001_00010001_00010001_00010010_00011100L, // D
                    0b00000000_00011111_00010000_00010000_00011110_00010000_00010000_00011111L, // E
                    0b00000000_00011111_00010000_00010000_00011110_00010000_00010000_00010000L, // F
                    0b00000000_00001110_00010001_00010000_00010111_00010001_00010001_00001111L, // G
                    0b00000000_00010001_00010001_00010001_00011111_00010001_00010001_00010001L, // H
                    0b00000000_00001110_00000100_00000100_00000100_00000100_00000100_00001110L, // I
                    0b00000000_00001110_00000010_00000010_00000010_00000010_00010010_00001100L, // J
                    0b00000000_00010001_00010010_00010100_00011000_00010100_00010010_00010001L, // K
                    0b00000000_00010000_00010000_00010000_00010000_00010000_00010000_00011111L, // L
                    0b00000000_00010001_00011011_00010101_00010101_00010001_00010001_00010001L, // M
                    0b00000000_00010001_00010001_00011001_00010101_00010011_00010001_00010001L, // N
                    0b00000000_00001110_00010001_00010001_00010001_00010001_00010001_00001110L, // O
                    0b00000000_00011110_00010001_00010001_00011110_00010000_00010000_00010000L, // P
                    0b00000000_00001110_00010001_00010001_00010001_00010101_00010010_00001101L, // Q
                    0b00000000_00011110_00010001_00010001_00011110_00010100_00010010_00010001L, // R
                    0b00000000_00001111_00010000_00010000_00001110_00000001_00000001_00011110L, // S
                    0b00000000_00011111_00000100_00000100_00000100_00000100_00000100_00000100L, // T
                    0b00000000_00010001_00010001_00010001_00010001_00010001_00010001_00001110L, // U
                    0b00000000_00010001_00010001_00010001_00010001_00010001_00001010_00000100L, // V
                    0b00000000_00010001_00010001_00010001_00010101_00010101_00010101_00001010L, // W
                    0b00000000_00010001_00010001_00001010_00000100_00001010_00010001_00010001L, // X
                    0b00000000_00010001_00010001_00010001_00001010_00000100_00000100_00000100L, // Y
                    0b00000000_00011111_00000001_00000010_00000100_00001000_00010000_00011111L, // Z
                    0b00000000_00001110_00001000_00001000_00001000_00001000_00001000_00001110L, // [
                    0b00000000_00000000_00010000_00001000_00000100_00000010_00000001_00000000L, // \
                    0b00000000_00001110_00000010_00000010_00000010_00000010_00000010_00001110L, // ]
                    0b00000000_00000100_00001010_00010001_00000000_00000000_00000000_00000000L, // ^
                    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00011111L, // _
                    0b00000000_00001000_00000100_00000010_00000000_00000000_00000000_00000000L, // `
                    0b00000000_00000000_00000000_00001110_00000001_00001111_00010001_00001111L, // a
                    0b00000000_00010000_00010000_00010110_00011001_00010001_00010001_00011110L, // b
                    0b00000000_00000000_00000000_00001110_00010000_00010000_00010001_00001110L, // c
                    0b00000000_00000001_00000001_00001101_00010011_00010001_00010001_00001111L, // d
                    0b00000000_00000000_00000000_00001110_00010001_00011111_00010000_00001110L, // e
                    0b00000000_00000110_00001001_00001000_00011100_00001000_00001000_00001000L, // f
                    0b00000000_00000000_00001111_00010001_00010001_00001111_00000001_00001110L, // g
                    0b00000000_00010000_00010000_00010110_00011001_00010001_00010001_00010001L, // h
                    0b00000000_00000100_00000000_00000100_00001100_00000100_00000100_00001110L, // i
                    0b00000000_00000010_00000000_00000110_00000010_00000010_00010010_00001100L, // j
                    0b00000000_00010000_00010000_00010010_00010100_00011000_00010100_00010010L, // k
                    0b00000000_00001100_00000100_00000100_00000100_00000100_00000100_00011111L, // l
                    0b00000000_00000000_00000000_00011010_00010101_00010101_00010001_00010001L, // m
                    0b00000000_00000000_00000000_00010110_00011001_00010001_00010001_00010001L, // n
                    0b00000000_00000000_00000000_00001110_00010001_00010001_00010001_00001110L, // o
                    0b00000000_00000000_00000000_00011110_00010001_00011110_00010000_00010000L, // p
                    0b00000000_00000000_00000000_00001101_00010011_00001111_00000001_00000001L, // q
                    0b00000000_00000000_00000000_00010110_00011001_00010000_00010000_00010000L, // r
                    0b00000000_00000000_00000000_00001110_00010000_00001110_00000001_00011110L, // s
                    0b00000000_00001000_00001000_00011100_00001000_00001000_00001001_00000110L, // t
                    0b00000000_00000000_00000000_00010001_00010001_00010001_00010011_00001101L, // u
                    0b00000000_00000000_00000000_00010001_00010001_00010001_00001010_00000100L, // v
                    0b00000000_00000000_00000000_00010001_00010001_00010101_00010101_00001010L, // w
                    0b00000000_00000000_00000000_00010001_00001010_00000100_00001010_00010001L, // x
                    0b00000000_00000000_00000000_00010001_00010001_00001111_00000001_00001110L, // y
                    0b00000000_00000000_00000000_00011111_00000010_00000100_00001000_00011111L, // z
                    0b00000000_00000010_00000100_00000100_00001000_00000100_00000100_00000010L, // {
                    0b00000000_00000100_00000100_00000100_00000100_00000100_00000100_00000100L, // |
                    0b00000000_00001000_00000100_00000100_00000010_00000100_00000100_00001000L, // }
                    0b00000000_00000000_00000000_00000000_00001101_00010010_00000000_00000000L); // ~

            addCharacters(0x0a0, 0,  // NBSP
                    0b00000000_00000100_00000000_00000000_00000100_00000100_00000100_00000100L, // ¡
                    0b00000000_00000100_00001110_00010100_00010100_00010101_00001110_00000100L, // ¢
                    0b00000000_00000110_00001000_00001000_00011100_00001000_00001001_00010110L, // £
                    0b00000000_00000000_00010001_00001110_00001010_00001110_00010001_00000000L, // ¤
                    0b00000000_00010001_00001010_00011111_00000100_00011111_00000100_00000100L, // ¥
                    0b00000000_00000100_00000100_00000100_00000000_00000100_00000100_00000100L, // ¦
                    0b00000000_00000110_00001001_00000100_00001010_00000100_00010010_00001100L, // §
                    0b00000000_00000010_00000101_00000100_00011111_00000100_00010100_00001000L, // ¨
                    0b00000000_00011111_00010001_00010101_00010111_00010101_00010001_00011111L, // ©
                    0b00000000_00001110_00000001_00001111_00010001_00001111_00000000_00011111L, // ª
                    0b00000000_00000000_00000101_00001010_00010100_00001010_00000101_00000000L, // «
                    0b00000000_00010010_00010101_00010101_00011101_00010101_00010101_00010010L, // ¬
                    0b00000000_00001111_00010001_00010001_00001111_00000101_00001001_00010001L, // SHY
                    0b00000000_00011111_00010001_00010101_00010001_00010011_00010101_00011111L, // ®
                    0b00000000_00000100_00001000_00001100_00000000_00000000_00000000_00000000L, // ¯
                    0b00001100_00010010_00010010_00010010_00001100_00000000_00000000_00000000L, // °
                    0b00000000_00000100_00000100_00011111_00000100_00000100_00000000_00011111L, // ±
                    0b00001100_00010010_00000100_00001000_00011110_00000000_00000000_00000000L, // ²
                    0b00011100_00000010_00001100_00000010_00011100_00000000_00000000_00000000L, // ³
                    0b00011100_00010010_00011100_00010000_00010010_00010111_00010010_00000011L, // ´
                    0b00000000_00010001_00010001_00010001_00010011_00011101_00010000_00010000L, // µ
                    0b00000000_00001111_00010011_00010011_00001111_00000011_00000011_00000011L, // ¶
                    0b00000000_00000000_00000000_00000000_00001100_00001100_00000000_00000000L, // ·
                    0b00000000_00000000_00000000_00001010_00010001_00010101_00010101_00001010L, // ¸
                    0b00001000_00011000_00001000_00001000_00011100_00000000_00000000_00000000L, // ¹
                    0b00000000_00001110_00010001_00010001_00010001_00001110_00000000_00011111L, // º
                    0b00000000_00000000_00010100_00001010_00000101_00001010_00010100_00000000L, // »
                    0b00010001_00010010_00010100_00001010_00010110_00001010_00001111_00000010L, // ¼
                    0b00010001_00010010_00010100_00001010_00010101_00000001_00000010_00000111L, // ½
                    0b00011000_00001000_00011000_00001001_00011011_00000101_00000111_00000001L, // ¾
                    0b00000000_00000100_00000000_00000100_00001000_00010000_00010001_00001110L, // ¿
                    0b00001000_00000100_00000100_00001010_00010001_00011111_00010001_00010001L, // À
                    0b00000010_00000100_00000100_00001010_00010001_00011111_00010001_00010001L, // Á
                    0b00000100_00001010_00000000_00001110_00010001_00011111_00010001_00010001L, // Â
                    0b00001101_00010010_00000000_00001110_00010001_00011111_00010001_00010001L, // Ã
                    0b00001010_00000000_00000100_00001010_00010001_00011111_00010001_00010001L, // Ä
                    0b00000100_00001010_00000100_00001010_00010001_00011111_00010001_00010001L, // Å
                    0b00000000_00000111_00001100_00010100_00010111_00011100_00010100_00010111L, // Æ
                    0b00001110_00010001_00010000_00010000_00010001_00001110_00000010_00000110L, // Ç
                    0b00001000_00000100_00000000_00011111_00010000_00011110_00010000_00011111L, // È
                    0b00000010_00000100_00000000_00011111_00010000_00011110_00010000_00011111L, // É
                    0b00000100_00001010_00000000_00011111_00010000_00011110_00010000_00011111L, // Ê
                    0b00000000_00001010_00000000_00011111_00010000_00011110_00010000_00011111L, // Ë
                    0b00001000_00000100_00000000_00001110_00000100_00000100_00000100_00001110L, // Ì
                    0b00000010_00000100_00000000_00001110_00000100_00000100_00000100_00001110L, // Í
                    0b00000100_00001010_00000000_00001110_00000100_00000100_00000100_00001110L, // Î
                    0b00000000_00001010_00000000_00001110_00000100_00000100_00000100_00001110L, // Ï
                    0b00000000_00001110_00001001_00001001_00011101_00001001_00001001_00001110L, // Ð
                    0b00001101_00010010_00000000_00010001_00011001_00010101_00010011_00010001L, // Ñ
                    0b00001000_00000100_00001110_00010001_00010001_00010001_00010001_00001110L, // Ò
                    0b00000010_00000100_00001110_00010001_00010001_00010001_00010001_00001110L, // Ó
                    0b00000100_00001010_00000000_00001110_00010001_00010001_00010001_00001110L, // Ô
                    0b00001101_00010010_00000000_00001110_00010001_00010001_00010001_00001110L, // Õ
                    0b00001010_00000000_00001110_00010001_00010001_00010001_00010001_00001110L, // Ö
                    0b00000000_00000000_00010001_00001010_00000100_00001010_00010001_00000000L, // ×
                    0b00000000_00001110_00000100_00001110_00010101_00001110_00000100_00001110L, // Ø
                    0b00001000_00000100_00010001_00010001_00010001_00010001_00010001_00001110L, // Ù
                    0b00000010_00000100_00010001_00010001_00010001_00010001_00010001_00001110L, // Ú
                    0b00000100_00001010_00000000_00010001_00010001_00010001_00010001_00001110L, // Û
                    0b00001010_00000000_00010001_00010001_00010001_00010001_00010001_00001110L, // Ü
                    0b00000010_00000100_00010001_00001010_00000100_00000100_00000100_00000100L, // Ý
                    0b00011000_00001000_00001110_00001001_00001001_00001110_00001000_00011100L, // Þ
                    0b00000000_00000110_00001001_00001001_00001110_00001001_00001001_00010110L, // ß
                    0b00001000_00000100_00000000_00001110_00000001_00001111_00010001_00001111L, // à
                    0b00000010_00000100_00000000_00001110_00000001_00001111_00010001_00001111L, // á
                    0b00000100_00001010_00000000_00001110_00000001_00001111_00010001_00001111L, // â
                    0b00001101_00010010_00000000_00001110_00000001_00001111_00010001_00001111L, // ã
                    0b00000000_00001010_00000000_00001110_00000001_00001111_00010001_00001111L, // ä
                    0b00000100_00001010_00000100_00001110_00000001_00001111_00010001_00001111L, // å
                    0b00000000_00000000_00011010_00000101_00001111_00010100_00010101_00001010L, // æ
                    0b00000000_00000000_00001110_00010000_00010001_00001110_00000100_00001100L, // ç
                    0b00001000_00000100_00000000_00001110_00010001_00011111_00010000_00001110L, // è
                    0b00000010_00000100_00000000_00001110_00010001_00011111_00010000_00001110L, // é
                    0b00000100_00001010_00000000_00001110_00010001_00011111_00010000_00001110L, // ê
                    0b00000000_00001010_00000000_00001110_00010001_00011111_00010000_00001110L, // ë
                    0b00001000_00000100_00000000_00000100_00001100_00000100_00000100_00001110L, // ì
                    0b00000010_00000100_00000000_00000100_00001100_00000100_00000100_00001110L, // í
                    0b00000100_00001010_00000000_00000100_00001100_00000100_00000100_00001110L, // î
                    0b00000000_00001010_00000000_00000100_00001100_00000100_00000100_00001110L, // ï
                    0b00000000_00010100_00001000_00010100_00000010_00001111_00010001_00001110L, // ð
                    0b00001101_00010010_00000000_00010110_00011001_00010001_00010001_00010001L, // ñ
                    0b00001000_00000100_00000000_00001110_00010001_00010001_00010001_00001110L, // ò
                    0b00000010_00000100_00000000_00001110_00010001_00010001_00010001_00001110L, // ó
                    0b00000000_00000100_00001010_00000000_00001110_00010001_00010001_00001110L, // ô
                    0b00000000_00001101_00010010_00000000_00001110_00010001_00010001_00001110L, // õ
                    0b00000000_00001010_00000000_00001110_00010001_00010001_00010001_00001110L, // ö
                    0b00000000_00000000_00000100_00000000_00011111_00000000_00000100_00000000L, // ÷
                    0b00000000_00000010_00000100_00001110_00010101_00001110_00000100_00001000L, // ø
                    0b00001000_00000100_00000000_00010001_00010001_00010001_00010011_00001101L, // ù
                    0b00000010_00000100_00000000_00010001_00010001_00010001_00010011_00001101L, // ú
                    0b00000100_00001010_00000000_00010001_00010001_00010001_00010011_00001101L, // û
                    0b00000000_00001010_00000000_00010001_00010001_00010001_00010011_00001101L, // ü
                    0b00000010_00000100_00000000_00010001_00010001_00001111_00000001_00001110L, // ý
                    0b00000000_00001100_00000100_00000110_00000101_00000110_00000100_00001110L, // þ
                    0b00000000_00001010_00000000_00010001_00010001_00001111_00000001_00001110L); // ÿ

            addCharacter(0x20AC,
                    0b00000000_00011111_00010001_00010000_00011110_00010001_00010001_00011110L); // 
    }
}
